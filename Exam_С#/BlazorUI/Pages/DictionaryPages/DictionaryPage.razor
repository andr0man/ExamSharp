@page "/dictionary/{Id:int}"
<div class="d-flex justify-content-between">
    <h3>@(Dictionary?.Type ?? "Loading...") словник</h3>
    <a href="@($"dictionary/{Dictionary?.Id}/word-add")" class="btn btn-success">Додати слово</a>
</div>

@if (Dictionary == null)
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
}
else if (Dictionary?.Words == null || Dictionary.Words.Count == 0)
{
    <span class="fs-5 text-body-secondary">Слів ще немає</span>
}
else
{
    <SearchBox Items="Dictionary.Words.ToList()" OnSearch="UpdateFilteredWords"></SearchBox>

    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Слово</th>
                <th>Переклади</th>
                <th>Дії</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var W in filteredWords)
            {
                <tr>
                    <td>@W.Id</td>
                    <td>@W.Value</td>
                    <td>@string.Join(", ", W.Translations?.Select(x => x.Value) ?? new List<string>())</td>
                    <td>
                        <a href="@($"dictionary/{Dictionary?.Id}/word-edit/{W.Id}")" class="btn btn-primary">Редагувати</a>
                        <button class="btn btn-danger" @onclick="() => ConfirmDelete(W.Id)">Видалити</button>
                        <button class="btn btn-success" @onclick="() => downloandFile(W)">Завантажити</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private MyDictionary Dictionary = new();
    private List<Word> filteredWords = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDictionaries();
    }

    private async Task LoadDictionaries()
    {
        Dictionary = await DictionaryService.GetById(Id);

        if (Dictionary != null)
        {
            var wordsList = Dictionary.Words?.ToList() ?? new List<Word>();

            for (int i = 0; i < wordsList.Count; i++)
            {
                wordsList[i] = await WordHttpService.GetById(wordsList[i].Id);
            }

            Dictionary.Words = wordsList;
            filteredWords = Dictionary.Words.ToList();
        }
    }

    private async Task Delete(int id)
    {
        await WordHttpService.DeleteAsync(id);
        await LoadDictionaries();
    }

    private async Task ConfirmDelete(int id)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new object[] { "Ви впевнені, що хочете видалити це слово?" });
        if (confirmed)
        {
            await Delete(id);
        }
    }

    private void UpdateFilteredWords(string searchTerm)
    {
        if (Dictionary?.Words == null)
        {
            filteredWords = new List<Word>();
            return;
        }

        if (string.IsNullOrEmpty(searchTerm))
        {
            filteredWords = Dictionary.Words.ToList();
        }
        else
        {
            filteredWords = Dictionary.Words
                .Where(x => x.Value.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                            x.Translations.Any(t => t.Value.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)))
                .ToList();
        }
    }
    private async void downloandFile(Word val)
    {
        var fileName = val.Value;
        var Content = $"Слово: {val.Value}\nПереклади: {string.Join(", ", val.Translations.Select(x => x.Value)) ?? "..."}";

        await JSRuntime.InvokeAsync<object>("saveFile", fileName, Content);
    }
}
